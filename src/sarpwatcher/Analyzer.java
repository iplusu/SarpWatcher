/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Analyzer.java
 *
 * Created on 2010. 9. 15, 오전 1:33:10
 */

package sarpwatcher;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author Administrator
 */
public class Analyzer extends javax.swing.JFrame {

    private SarpWatcher sw;
    private ThroughputChart throughputChart = null;
    private HopCountChart hopCountChart = null;
    private XmlReader xReader = null;
    private File excelFile = null;
    private File arrayFile = null;
    private File excelFile_tran = null;
    private File arrayFile_tran = null;
    private FileWriter fwContent;
    private BufferedWriter bwContent;
    /** Creates new form Analyzer */
    public Analyzer(String Name, JFrame f) {
        initComponents();
        String tmp = Name.replace(".sre", "_excel.csv");
        excelFile = new File(tmp);
        
        tmp = Name.replace(".sre", "_array.array");
        arrayFile = new File(tmp);
        
        tmp = Name.replace(".sre", "_tran_excel.csv");
        excelFile_tran = new File(tmp);
        
        tmp = Name.replace(".sre", "_tran_array.array");
        arrayFile_tran = new File(tmp);
        
        this.setTitle(Name.substring(Name.lastIndexOf("\\")+1).toUpperCase());
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        sw = (SarpWatcher)f;
    }

    public void set(XmlReader xmlReader){
        xReader = xmlReader;
        
        int cnt = 0;
        int size = 0, rate = 0, good = 0, bad = 0;
        if (xmlReader.throughputSet != null) {
            size = xmlReader.throughputSet.size();
            
            for (cnt = 0; cnt < xmlReader.throughputSet.size(); cnt++) {
                ThroughputArraySet tmpTas = xmlReader.throughputSet.get(cnt);
                if(tmpTas.throughput != 100)
                    bad++;
                else
                    good++;
                rate += tmpTas.throughput;
            }
            tfNOT.setText(String.valueOf(size));
            tfOTR.setText(String.format("%.3f", (float)rate/size));
            tfNGB.setText(String.valueOf(good));
            tfNBB.setText(String.valueOf(bad));
        }
        size = 0; rate = 0; cnt = 0;
        if(xmlReader.parentSet != null){
            size = xmlReader.throughputSet.size();
            for(cnt = 0; cnt < size; cnt++){
                ParentArraySet tmpPas = xmlReader.parentSet.get(cnt);
                rate += tmpPas.size();
            }
            tfHop.setText(String.valueOf(rate));
            tfAHop.setText(String.format("%.3f", (float)rate/size));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfNOT = new javax.swing.JTextField();
        tfNBB = new javax.swing.JTextField();
        tfOTR = new javax.swing.JTextField();
        tfNGB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfHop = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfAHop = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        ThroughputByTransaction = new javax.swing.JCheckBox();
        HopCountsByTransaction = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Overall Throughput Rate :");

        jLabel2.setText("Number of Good Behaviors :");

        jLabel3.setText("Number of Bad Behaviors :");

        jLabel4.setText("Number of Transactions :");

        jLabel5.setText("Number of Hops :");

        jLabel6.setText("Average Hops :");

        jButton1.setText("jButton1");

        ThroughputByTransaction.setText("Throughput by transaction");
        ThroughputByTransaction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ThroughputByTransactionMouseClicked(evt);
            }
        });

        HopCountsByTransaction.setText("Hop counts by transaction");
        HopCountsByTransaction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HopCountsByTransactionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HopCountsByTransaction)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfNBB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tfNGB)
                                .addComponent(tfOTR)
                                .addComponent(tfNOT, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                            .addComponent(tfHop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addComponent(tfAHop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)))
                    .addComponent(ThroughputByTransaction))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfNOT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfOTR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfNGB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfNBB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfHop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tfAHop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ThroughputByTransaction)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HopCountsByTransaction)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ThroughputByTransactionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ThroughputByTransactionMouseClicked
        // TODO add your handling code here:
        if (xReader.throughputSet == null) {
            new MessageBox(this, "Error", "No Throughput history.");
            return;
        }

        int size = xReader.throughputSet.size();
        int cnt = 0, totalRates = 0;
        double rate = (double) 0.0;
        if(ThroughputByTransaction.isSelected()){
            throughputChart = new ThroughputChart("Throughput Analyzer");
            throughputChart.setVisible(true);
            StringBuilder excelContent = new StringBuilder();
            StringBuilder arrayContent = new StringBuilder();
            arrayContent.append("{");

            for(cnt = 0; cnt < size; cnt ++){
                totalRates += xReader.throughputSet.get(cnt).throughput;
                rate = (double)((double)totalRates/(double)(cnt+1));
                throughputChart.addValues(xReader.throughputSet.get(cnt).transaction, rate);
                excelContent.append(",");
                excelContent.append(rate);

                arrayContent.append(rate);
                arrayContent.append(",");
            }
            arrayContent.append("}");
            try {
                fwContent = new FileWriter(excelFile, false);
                bwContent = new BufferedWriter(fwContent, 2048);
                bwContent.write(excelContent.toString());
                bwContent.newLine();
                bwContent.flush();
                bwContent.close();
                
                fwContent = new FileWriter(arrayFile, false);
                bwContent = new BufferedWriter(fwContent, 2048);
                bwContent.write(arrayContent.toString());
                bwContent.newLine();
                bwContent.flush();
                bwContent.close();
            } catch (IOException ex) {
                Logger.getLogger(Analyzer.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else{
            if(throughputChart.isVisible() && throughputChart != null){
                throughputChart.setVisible(false);
                throughputChart = null;
            }
        }
    }//GEN-LAST:event_ThroughputByTransactionMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        if(throughputChart.isVisible() && throughputChart != null){
            throughputChart.setVisible(false);
            throughputChart = null;
        }
        if(hopCountChart.isVisible() && hopCountChart != null){
            hopCountChart.setVisible(false);
            hopCountChart = null;
        }
    }//GEN-LAST:event_formWindowClosed

    private void HopCountsByTransactionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HopCountsByTransactionMouseClicked
        // TODO add your handling code here:
        if (xReader.parentSet == null) {
            new MessageBox(this, "Error", "No Parents history.");
            return;
        }

        int size = xReader.parentSet.size();
        int i = 0, total = 0;
        
        if(HopCountsByTransaction.isSelected()){
            hopCountChart = new HopCountChart("Hop Counts Analyzer");
            hopCountChart.setVisible(true);
            StringBuilder excelContent = new StringBuilder();
            StringBuilder arrayContent = new StringBuilder();
            arrayContent.append("{");
            
            for(i = 0; i < size;i++){
                total += xReader.parentSet.get(i).size();
                hopCountChart.addValues(xReader.parentSet.get(i).getTransaction(), (double)(total));
                //hopCountChart.addValues(xReader.parentSet.get(i).getTransaction(), (double)((double)total/(double)(i+1)));
                //System.out.println(xReader.parentSet.get(i).getTransaction() + " " + (double)((double)total/(double)(i+1)));
                excelContent.append(",");
                excelContent.append((double)((double)total));///(double)(i+1)));

                arrayContent.append((double)((double)total));///(double)(i+1)));
                arrayContent.append(",");
            }
            
            arrayContent.append("}");
            try {
                fwContent = new FileWriter(excelFile_tran, false);
                bwContent = new BufferedWriter(fwContent, 2048);
                bwContent.write(excelContent.toString());
                bwContent.newLine();
                bwContent.flush();
                bwContent.close();
                
                fwContent = new FileWriter(arrayFile_tran, false);
                bwContent = new BufferedWriter(fwContent, 2048);
                bwContent.write(arrayContent.toString());
                bwContent.newLine();
                bwContent.flush();
                bwContent.close();
            } catch (IOException ex) {
                Logger.getLogger(Analyzer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            if(hopCountChart.isVisible() && hopCountChart != null){
                hopCountChart.setVisible(false);
                hopCountChart = null;
            }
        }
    }//GEN-LAST:event_HopCountsByTransactionMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox HopCountsByTransaction;
    private javax.swing.JCheckBox ThroughputByTransaction;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField tfAHop;
    private javax.swing.JTextField tfHop;
    private javax.swing.JTextField tfNBB;
    private javax.swing.JTextField tfNGB;
    private javax.swing.JTextField tfNOT;
    private javax.swing.JTextField tfOTR;
    // End of variables declaration//GEN-END:variables

}
